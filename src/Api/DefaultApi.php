<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  iPOS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iPOS REST Service
 *
 * Api for connecting to iPOS (FileMaker 16)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iPOS\Api;

use \iPOS\ApiClient;
use \iPOS\ApiException;
use \iPOS\Configuration;
use \iPOS\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  iPOS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \iPOS\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \iPOS\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\iPOS\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://fm.macpartner.dk/fmr/rest/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \iPOS\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \iPOS\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\iPOS\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createDelivery
     *
     * Creates a new Delivery
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\DeliveryObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\CreateResponse
     */
    public function createDelivery($strService, $data = null)
    {
        list($response) = $this->createDeliveryWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createDeliveryWithHttpInfo
     *
     * Creates a new Delivery
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\DeliveryObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeliveryWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling createDelivery');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_Varemodtagelse";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\CreateResponse',
                '/record/{strService}/api_SPY_Varemodtagelse'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\CreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\CreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createDeliveryLine
     *
     * Creates a new Delivery Line
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\CreateResponse
     */
    public function createDeliveryLine($strService, $data = null)
    {
        list($response) = $this->createDeliveryLineWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createDeliveryLineWithHttpInfo
     *
     * Creates a new Delivery Line
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeliveryLineWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling createDeliveryLine');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_Varemodtagelse_linie";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\CreateResponse',
                '/record/{strService}/api_SPY_Varemodtagelse_linie'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\CreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\CreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProduct
     *
     * Creates a new product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\CreateResponse
     */
    public function createProduct($strService, $data = null)
    {
        list($response) = $this->createProductWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * Creates a new product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling createProduct');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\CreateResponse',
                '/record/{strService}/api_SPY_varer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\CreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\CreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductType
     *
     * Creates a new product type
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\CreateResponse
     */
    public function createProductType($strService, $data = null)
    {
        list($response) = $this->createProductTypeWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createProductTypeWithHttpInfo
     *
     * Creates a new product type
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductTypeWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling createProductType');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varegrupper";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\CreateResponse',
                '/record/{strService}/api_SPY_varegrupper'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\CreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\CreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findProductByEAN
     *
     * finds a product based on its EAN code
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function findProductByEAN($strService, $data = null)
    {
        list($response) = $this->findProductByEANWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findProductByEANWithHttpInfo
     *
     * finds a product based on its EAN code
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductByEANWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling findProductByEAN');
        }
        // parse inputs
        $resourcePath = "/find/{strService}/api_SPY_varer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ProductSearchResponseObject',
                '/find/{strService}/api_SPY_varer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ProductSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ProductSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findProductType
     *
     * finds a product type based on its Id
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ProductTypeSearchResponseObject
     */
    public function findProductType($strService, $data = null)
    {
        list($response) = $this->findProductTypeWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findProductTypeWithHttpInfo
     *
     * finds a product type based on its Id
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ProductTypeSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductTypeWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling findProductType');
        }
        // parse inputs
        $resourcePath = "/find/{strService}/api_SPY_varegrupper";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ProductTypeSearchResponseObject',
                '/find/{strService}/api_SPY_varegrupper'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ProductTypeSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ProductTypeSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findSalesReports
     *
     * finds sales reports
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\SalesReportSearchResponseObject
     */
    public function findSalesReports($strService, $data = null)
    {
        list($response) = $this->findSalesReportsWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findSalesReportsWithHttpInfo
     *
     * finds sales reports
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\SalesReportSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSalesReportsWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling findSalesReports');
        }
        // parse inputs
        $resourcePath = "/find/{strService}/api_SPY_Sale";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\SalesReportSearchResponseObject',
                '/find/{strService}/api_SPY_Sale'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\SalesReportSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\SalesReportSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllProductTypes
     *
     * retrieves all product types
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param string $offset  (optional)
     * @param string $range  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ProductTypeSearchResponseObject
     */
    public function getAllProductTypes($strService, $offset = null, $range = null)
    {
        list($response) = $this->getAllProductTypesWithHttpInfo($strService, $offset, $range);
        return $response;
    }

    /**
     * Operation getAllProductTypesWithHttpInfo
     *
     * retrieves all product types
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param string $offset  (optional)
     * @param string $range  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ProductTypeSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProductTypesWithHttpInfo($strService, $offset = null, $range = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling getAllProductTypes');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varegrupper";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ProductTypeSearchResponseObject',
                '/record/{strService}/api_SPY_varegrupper'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ProductTypeSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ProductTypeSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllProducts
     *
     * retrieves all products
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param string $offset  (optional)
     * @param string $range  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function getAllProducts($strService, $offset = null, $range = null)
    {
        list($response) = $this->getAllProductsWithHttpInfo($strService, $offset, $range);
        return $response;
    }

    /**
     * Operation getAllProductsWithHttpInfo
     *
     * retrieves all products
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param string $offset  (optional)
     * @param string $range  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProductsWithHttpInfo($strService, $offset = null, $range = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling getAllProducts');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ProductSearchResponseObject',
                '/record/{strService}/api_SPY_varer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ProductSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ProductSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDataToken
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\AuthenticationResponseObject
     */
    public function getDataToken($strService, $data = null)
    {
        list($response) = $this->getDataTokenWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation getDataTokenWithHttpInfo
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\AuthenticationResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataTokenWithHttpInfo($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling getDataToken');
        }
        // parse inputs
        $resourcePath = "/auth/{strService}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\AuthenticationResponseObject',
                '/auth/{strService}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\AuthenticationResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\AuthenticationResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProduct
     *
     * retrieves a product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function getProduct($strService, $iRecordID)
    {
        list($response) = $this->getProductWithHttpInfo($strService, $iRecordID);
        return $response;
    }

    /**
     * Operation getProductWithHttpInfo
     *
     * retrieves a product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductWithHttpInfo($strService, $iRecordID)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling getProduct');
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iRecordID when calling getProduct');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varer/{iRecordID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                "{" . "iRecordID" . "}",
                $this->apiClient->getSerializer()->toPathValue($iRecordID),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ProductSearchResponseObject',
                '/record/{strService}/api_SPY_varer/{iRecordID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ProductSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ProductSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSaleReport
     *
     * retrieves a Sales Report line
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\SalesReportSearchResponseObject
     */
    public function getSaleReport($strService, $iRecordID)
    {
        list($response) = $this->getSaleReportWithHttpInfo($strService, $iRecordID);
        return $response;
    }

    /**
     * Operation getSaleReportWithHttpInfo
     *
     * retrieves a Sales Report line
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\SalesReportSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSaleReportWithHttpInfo($strService, $iRecordID)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling getSaleReport');
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iRecordID when calling getSaleReport');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_Sale/{iRecordID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                "{" . "iRecordID" . "}",
                $this->apiClient->getSerializer()->toPathValue($iRecordID),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\SalesReportSearchResponseObject',
                '/record/{strService}/api_SPY_Sale/{iRecordID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\SalesReportSearchResponseObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\SalesReportSearchResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation markSalesReportAsRead
     *
     * Marks a Sales Report line as Read
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @param \iPOS\Model\SalesReportObject $data  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ResponseModel
     */
    public function markSalesReportAsRead($strService, $iRecordID, $data = null)
    {
        list($response) = $this->markSalesReportAsReadWithHttpInfo($strService, $iRecordID, $data);
        return $response;
    }

    /**
     * Operation markSalesReportAsReadWithHttpInfo
     *
     * Marks a Sales Report line as Read
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @param \iPOS\Model\SalesReportObject $data  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function markSalesReportAsReadWithHttpInfo($strService, $iRecordID, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling markSalesReportAsRead');
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iRecordID when calling markSalesReportAsRead');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_Sale/{iRecordID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                "{" . "iRecordID" . "}",
                $this->apiClient->getSerializer()->toPathValue($iRecordID),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ResponseModel',
                '/record/{strService}/api_SPY_Sale/{iRecordID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ResponseModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ResponseModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProduct
     *
     * Updates a product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @param \iPOS\Model\ProductObject $data  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return \iPOS\Model\ResponseModel
     */
    public function updateProduct($strService, $iRecordID, $data = null)
    {
        list($response) = $this->updateProductWithHttpInfo($strService, $iRecordID, $data);
        return $response;
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * Updates a product
     *
     * @param string $strService Target Service in FileMaker (required)
     * @param int $iRecordID FileMaker record id (required)
     * @param \iPOS\Model\ProductObject $data  (optional)
     * @throws \iPOS\ApiException on non-2xx response
     * @return array of \iPOS\Model\ResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($strService, $iRecordID, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException('Missing the required parameter $strService when calling updateProduct');
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iRecordID when calling updateProduct');
        }
        // parse inputs
        $resourcePath = "/record/{strService}/api_SPY_varer/{iRecordID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                "{" . "strService" . "}",
                $this->apiClient->getSerializer()->toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                "{" . "iRecordID" . "}",
                $this->apiClient->getSerializer()->toPathValue($iRecordID),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('FM-data-token');
        if (strlen($apiKey) !== 0) {
            $headerParams['FM-data-token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iPOS\Model\ResponseModel',
                '/record/{strService}/api_SPY_varer/{iRecordID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iPOS\Model\ResponseModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ResponseModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iPOS\Model\ErrorResponseObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
