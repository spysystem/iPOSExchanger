<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  iPOS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iPOS REST Service
 *
 * Api for connecting to iPOS (FileMaker 16)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iPOS\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use iPOS\ApiException;
use iPOS\Configuration;
use iPOS\HeaderSelector;
use iPOS\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  iPOS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDelivery
     *
     * Creates a new Delivery
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\CreateResponse
     */
    public function createDelivery($strService, $data = null)
    {
        list($response) = $this->createDeliveryWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createDeliveryWithHttpInfo
     *
     * Creates a new Delivery
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeliveryWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createDeliveryRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\CreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeliveryAsync
     *
     * Creates a new Delivery
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryAsync($strService, $data = null)
    {
        return $this->createDeliveryAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeliveryAsyncWithHttpInfo
     *
     * Creates a new Delivery
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createDeliveryRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDelivery'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDeliveryRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling createDelivery'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_Varemodtagelse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeliveryLine
     *
     * Creates a new Delivery Line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\CreateResponse
     */
    public function createDeliveryLine($strService, $data = null)
    {
        list($response) = $this->createDeliveryLineWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createDeliveryLineWithHttpInfo
     *
     * Creates a new Delivery Line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeliveryLineWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createDeliveryLineRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\CreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeliveryLineAsync
     *
     * Creates a new Delivery Line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryLineAsync($strService, $data = null)
    {
        return $this->createDeliveryLineAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeliveryLineAsyncWithHttpInfo
     *
     * Creates a new Delivery Line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryLineAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createDeliveryLineRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeliveryLine'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\DeliveryLineObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDeliveryLineRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling createDeliveryLine'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_Varemodtagelse_linie';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProduct
     *
     * Creates a new product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\CreateResponse
     */
    public function createProduct($strService, $data = null)
    {
        list($response) = $this->createProductWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * Creates a new product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createProductRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\CreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductAsync
     *
     * Creates a new product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsync($strService, $data = null)
    {
        return $this->createProductAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductAsyncWithHttpInfo
     *
     * Creates a new product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createProductRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProduct'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProductRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling createProduct'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProductType
     *
     * Creates a new product type
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\CreateResponse
     */
    public function createProductType($strService, $data = null)
    {
        list($response) = $this->createProductTypeWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation createProductTypeWithHttpInfo
     *
     * Creates a new product type
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\CreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductTypeWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createProductTypeRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\CreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductTypeAsync
     *
     * Creates a new product type
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductTypeAsync($strService, $data = null)
    {
        return $this->createProductTypeAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductTypeAsyncWithHttpInfo
     *
     * Creates a new product type
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductTypeAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\CreateResponse';
        $request = $this->createProductTypeRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProductType'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeObject $data Record to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProductTypeRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling createProductType'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varegrupper';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProductByEAN
     *
     * finds a product based on its EAN code
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function findProductByEAN($strService, $data = null)
    {
        list($response) = $this->findProductByEANWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findProductByEANWithHttpInfo
     *
     * finds a product based on its EAN code
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductByEANWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->findProductByEANRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ProductSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findProductByEANAsync
     *
     * finds a product based on its EAN code
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductByEANAsync($strService, $data = null)
    {
        return $this->findProductByEANAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProductByEANAsyncWithHttpInfo
     *
     * finds a product based on its EAN code
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductByEANAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->findProductByEANRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProductByEAN'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findProductByEANRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling findProductByEAN'
            );
        }

        $resourcePath = '/find/{strService}/api_SPY_varer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProductType
     *
     * finds a product type based on its Id
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ProductTypeSearchResponseObject
     */
    public function findProductType($strService, $data = null)
    {
        list($response) = $this->findProductTypeWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findProductTypeWithHttpInfo
     *
     * finds a product type based on its Id
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ProductTypeSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductTypeWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\ProductTypeSearchResponseObject';
        $request = $this->findProductTypeRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ProductTypeSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findProductTypeAsync
     *
     * finds a product type based on its Id
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductTypeAsync($strService, $data = null)
    {
        return $this->findProductTypeAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProductTypeAsyncWithHttpInfo
     *
     * finds a product type based on its Id
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductTypeAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\ProductTypeSearchResponseObject';
        $request = $this->findProductTypeRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProductType'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\ProductTypeSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findProductTypeRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling findProductType'
            );
        }

        $resourcePath = '/find/{strService}/api_SPY_varegrupper';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSalesReports
     *
     * finds sales reports
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\SalesReportSearchResponseObject
     */
    public function findSalesReports($strService, $data = null)
    {
        list($response) = $this->findSalesReportsWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation findSalesReportsWithHttpInfo
     *
     * finds sales reports
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\SalesReportSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSalesReportsWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\SalesReportSearchResponseObject';
        $request = $this->findSalesReportsRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\SalesReportSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSalesReportsAsync
     *
     * finds sales reports
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSalesReportsAsync($strService, $data = null)
    {
        return $this->findSalesReportsAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSalesReportsAsyncWithHttpInfo
     *
     * finds sales reports
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSalesReportsAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\SalesReportSearchResponseObject';
        $request = $this->findSalesReportsRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSalesReports'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\SalesReportSearchObject $data Search data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findSalesReportsRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling findSalesReports'
            );
        }

        $resourcePath = '/find/{strService}/api_SPY_Sale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllProductTypes
     *
     * retrieves all product types
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset offset (optional)
     * @param  string $range range (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ProductTypeSearchResponseObject
     */
    public function getAllProductTypes($strService, $offset = null, $range = null)
    {
        list($response) = $this->getAllProductTypesWithHttpInfo($strService, $offset, $range);
        return $response;
    }

    /**
     * Operation getAllProductTypesWithHttpInfo
     *
     * retrieves all product types
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ProductTypeSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProductTypesWithHttpInfo($strService, $offset = null, $range = null)
    {
        $returnType = '\iPOS\Model\ProductTypeSearchResponseObject';
        $request = $this->getAllProductTypesRequest($strService, $offset, $range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ProductTypeSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllProductTypesAsync
     *
     * retrieves all product types
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProductTypesAsync($strService, $offset = null, $range = null)
    {
        return $this->getAllProductTypesAsyncWithHttpInfo($strService, $offset, $range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllProductTypesAsyncWithHttpInfo
     *
     * retrieves all product types
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProductTypesAsyncWithHttpInfo($strService, $offset = null, $range = null)
    {
        $returnType = '\iPOS\Model\ProductTypeSearchResponseObject';
        $request = $this->getAllProductTypesRequest($strService, $offset, $range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllProductTypes'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllProductTypesRequest($strService, $offset = null, $range = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling getAllProductTypes'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varegrupper';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllProducts
     *
     * retrieves all products
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset offset (optional)
     * @param  string $range range (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function getAllProducts($strService, $offset = null, $range = null)
    {
        list($response) = $this->getAllProductsWithHttpInfo($strService, $offset, $range);
        return $response;
    }

    /**
     * Operation getAllProductsWithHttpInfo
     *
     * retrieves all products
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProductsWithHttpInfo($strService, $offset = null, $range = null)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->getAllProductsRequest($strService, $offset, $range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ProductSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllProductsAsync
     *
     * retrieves all products
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProductsAsync($strService, $offset = null, $range = null)
    {
        return $this->getAllProductsAsyncWithHttpInfo($strService, $offset, $range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllProductsAsyncWithHttpInfo
     *
     * retrieves all products
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProductsAsyncWithHttpInfo($strService, $offset = null, $range = null)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->getAllProductsRequest($strService, $offset, $range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllProducts'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  string $offset (optional)
     * @param  string $range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllProductsRequest($strService, $offset = null, $range = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling getAllProducts'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }

        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataToken
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\AuthenticationResponseObject
     */
    public function getDataToken($strService, $data = null)
    {
        list($response) = $this->getDataTokenWithHttpInfo($strService, $data);
        return $response;
    }

    /**
     * Operation getDataTokenWithHttpInfo
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\AuthenticationResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataTokenWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\AuthenticationResponseObject';
        $request = $this->getDataTokenRequest($strService, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\AuthenticationResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataTokenAsync
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataTokenAsync($strService, $data = null)
    {
        return $this->getDataTokenAsyncWithHttpInfo($strService, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataTokenAsyncWithHttpInfo
     *
     * gets an authentication token (valid for 15 minutes)
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataTokenAsyncWithHttpInfo($strService, $data = null)
    {
        $returnType = '\iPOS\Model\AuthenticationResponseObject';
        $request = $this->getDataTokenRequest($strService, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataToken'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  \iPOS\Model\AuthenticationObject $data Connecting data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDataTokenRequest($strService, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling getDataToken'
            );
        }

        $resourcePath = '/auth/{strService}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProduct
     *
     * retrieves a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ProductSearchResponseObject
     */
    public function getProduct($strService, $iRecordID)
    {
        list($response) = $this->getProductWithHttpInfo($strService, $iRecordID);
        return $response;
    }

    /**
     * Operation getProductWithHttpInfo
     *
     * retrieves a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ProductSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductWithHttpInfo($strService, $iRecordID)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->getProductRequest($strService, $iRecordID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ProductSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductAsync
     *
     * retrieves a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsync($strService, $iRecordID)
    {
        return $this->getProductAsyncWithHttpInfo($strService, $iRecordID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductAsyncWithHttpInfo
     *
     * retrieves a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsyncWithHttpInfo($strService, $iRecordID)
    {
        $returnType = '\iPOS\Model\ProductSearchResponseObject';
        $request = $this->getProductRequest($strService, $iRecordID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProduct'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductRequest($strService, $iRecordID)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling getProduct'
            );
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iRecordID when calling getProduct'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varer/{iRecordID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                '{' . 'iRecordID' . '}',
                ObjectSerializer::toPathValue($iRecordID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSaleReport
     *
     * retrieves a Sales Report line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\SalesReportSearchResponseObject
     */
    public function getSaleReport($strService, $iRecordID)
    {
        list($response) = $this->getSaleReportWithHttpInfo($strService, $iRecordID);
        return $response;
    }

    /**
     * Operation getSaleReportWithHttpInfo
     *
     * retrieves a Sales Report line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\SalesReportSearchResponseObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSaleReportWithHttpInfo($strService, $iRecordID)
    {
        $returnType = '\iPOS\Model\SalesReportSearchResponseObject';
        $request = $this->getSaleReportRequest($strService, $iRecordID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\SalesReportSearchResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSaleReportAsync
     *
     * retrieves a Sales Report line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSaleReportAsync($strService, $iRecordID)
    {
        return $this->getSaleReportAsyncWithHttpInfo($strService, $iRecordID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSaleReportAsyncWithHttpInfo
     *
     * retrieves a Sales Report line
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSaleReportAsyncWithHttpInfo($strService, $iRecordID)
    {
        $returnType = '\iPOS\Model\SalesReportSearchResponseObject';
        $request = $this->getSaleReportRequest($strService, $iRecordID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSaleReport'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSaleReportRequest($strService, $iRecordID)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling getSaleReport'
            );
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iRecordID when calling getSaleReport'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_Sale/{iRecordID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                '{' . 'iRecordID' . '}',
                ObjectSerializer::toPathValue($iRecordID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markSalesReportAsRead
     *
     * Marks a Sales Report line as Read
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\SalesReportObject $data data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ResponseModel
     */
    public function markSalesReportAsRead($strService, $iRecordID, $data = null)
    {
        list($response) = $this->markSalesReportAsReadWithHttpInfo($strService, $iRecordID, $data);
        return $response;
    }

    /**
     * Operation markSalesReportAsReadWithHttpInfo
     *
     * Marks a Sales Report line as Read
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\SalesReportObject $data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function markSalesReportAsReadWithHttpInfo($strService, $iRecordID, $data = null)
    {
        $returnType = '\iPOS\Model\ResponseModel';
        $request = $this->markSalesReportAsReadRequest($strService, $iRecordID, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markSalesReportAsReadAsync
     *
     * Marks a Sales Report line as Read
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\SalesReportObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markSalesReportAsReadAsync($strService, $iRecordID, $data = null)
    {
        return $this->markSalesReportAsReadAsyncWithHttpInfo($strService, $iRecordID, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markSalesReportAsReadAsyncWithHttpInfo
     *
     * Marks a Sales Report line as Read
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\SalesReportObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markSalesReportAsReadAsyncWithHttpInfo($strService, $iRecordID, $data = null)
    {
        $returnType = '\iPOS\Model\ResponseModel';
        $request = $this->markSalesReportAsReadRequest($strService, $iRecordID, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markSalesReportAsRead'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\SalesReportObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function markSalesReportAsReadRequest($strService, $iRecordID, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling markSalesReportAsRead'
            );
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iRecordID when calling markSalesReportAsRead'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_Sale/{iRecordID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                '{' . 'iRecordID' . '}',
                ObjectSerializer::toPathValue($iRecordID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProduct
     *
     * Updates a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\ProductObject $data data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iPOS\Model\ResponseModel
     */
    public function updateProduct($strService, $iRecordID, $data = null)
    {
        list($response) = $this->updateProductWithHttpInfo($strService, $iRecordID, $data);
        return $response;
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * Updates a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\ProductObject $data (optional)
     *
     * @throws \iPOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iPOS\Model\ResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($strService, $iRecordID, $data = null)
    {
        $returnType = '\iPOS\Model\ResponseModel';
        $request = $this->updateProductRequest($strService, $iRecordID, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 477:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iPOS\Model\ErrorResponseObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProductAsync
     *
     * Updates a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\ProductObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsync($strService, $iRecordID, $data = null)
    {
        return $this->updateProductAsyncWithHttpInfo($strService, $iRecordID, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProductAsyncWithHttpInfo
     *
     * Updates a product
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\ProductObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsyncWithHttpInfo($strService, $iRecordID, $data = null)
    {
        $returnType = '\iPOS\Model\ResponseModel';
        $request = $this->updateProductRequest($strService, $iRecordID, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProduct'
     *
     * @param  string $strService Target Service in FileMaker (required)
     * @param  int $iRecordID FileMaker record id (required)
     * @param  \iPOS\Model\ProductObject $data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProductRequest($strService, $iRecordID, $data = null)
    {
        // verify the required parameter 'strService' is set
        if ($strService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $strService when calling updateProduct'
            );
        }
        // verify the required parameter 'iRecordID' is set
        if ($iRecordID === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iRecordID when calling updateProduct'
            );
        }

        $resourcePath = '/record/{strService}/api_SPY_varer/{iRecordID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($strService !== null) {
            $resourcePath = str_replace(
                '{' . 'strService' . '}',
                ObjectSerializer::toPathValue($strService),
                $resourcePath
            );
        }
        // path params
        if ($iRecordID !== null) {
            $resourcePath = str_replace(
                '{' . 'iRecordID' . '}',
                ObjectSerializer::toPathValue($iRecordID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('FM-data-token');
        if ($apiKey !== null) {
            $headers['FM-data-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
